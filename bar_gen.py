# -*- coding: utf-8 -*-
"""bar_gen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sIQza4L-hA_P8_a56jKUw7-g9_lCPDtr
"""

import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
from barcode.codex import Code128
from barcode.writer import ImageWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib.utils import ImageReader
import os
from PIL import ImageFont

# ---- Compatibility patch for Pillow >= 10 ----
# python-barcode still calls getsize(), so we reintroduce it
if not hasattr(ImageFont.FreeTypeFont, "getsize"):
    def _getsize(self, text, *args, **kwargs):
        bbox = self.getbbox(text, *args, **kwargs)
        return (bbox[2] - bbox[0], bbox[3] - bbox[1])
    ImageFont.FreeTypeFont.getsize = _getsize
# -----------------------------------------------

def generate_barcodes_pdf():
    try:
        file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
        if not file_path:
            return

        # Explicit engine selection = avoids PyInstaller issues
        ext = os.path.splitext(file_path)[1].lower()
        if ext == ".xlsx":
            df = pd.read_excel(file_path, engine="openpyxl")
        elif ext == ".xls":
            df = pd.read_excel(file_path, engine="xlrd")
        else:
            messagebox.showerror("Error", "Unsupported file type (use .xls or .xlsx).")
            return

        if df.shape[1] < 2:
            messagebox.showerror("Error", "Excel must have at least 2 columns (Code, Name).")
            return

        codes = df.iloc[:, 0].astype(str).tolist()
        names = df.iloc[:, 5].astype(str).tolist()  # use 2nd column (not hardcoded to 5th)

        pdf_file = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf")],
            title="Save PDF File As"
        )
        if not pdf_file:
            return

        output_dir = os.path.join(os.getcwd(), "barcodes_temp")
        os.makedirs(output_dir, exist_ok=True)

        c = canvas.Canvas(pdf_file, pagesize=A4)
        width, height = A4
        y_position = height - 40 * mm

        for i, (code, name) in enumerate(zip(codes, names), start=1):
            barcode_base = os.path.join(output_dir, f"{i}")
            barcode_name = f"{barcode_base}.png"
            Code128(code, writer=ImageWriter()).save(barcode_base)

            img = ImageReader(barcode_name)
            c.drawImage(img, 20 * mm, y_position, width=60 * mm, height=20 * mm,
                        preserveAspectRatio=True, mask='auto')

            c.setFont("Helvetica", 10)
            c.drawString(85 * mm, y_position + 10 * mm, f"Name: {name}")
            c.drawString(85 * mm, y_position + 5 * mm, f"Code: {code}")

            y_position -= 30 * mm
            if y_position < 40 * mm:
                c.showPage()
                y_position = height - 40 * mm

        c.save()
        messagebox.showinfo("Success", f"PDF generated!\nSaved at:\n{pdf_file}")

    except Exception as e:
        messagebox.showerror("Error", str(e))

# --- GUI ---
root = tk.Tk()
root.title("Excel to Barcode → PDF Converter")

# Fullscreen
root.state('zoomed')  # Windows full screen
root.configure(bg="#2c3e50")  # dark navy background

# Frame for content
frame = tk.Frame(root, bg="#2c3e50")
frame.place(relx=0.5, rely=0.5, anchor="center")  # center frame

# Title label
label = tk.Label(
    frame,
    text="Let's Convert Excel to Barcodes",
    font=("Helvetica", 28, "bold"),
    fg="white",
    bg="#2c3e50"
)
label.pack(pady=40)

# Main button
btn = tk.Button(
    frame,
    text="Select Excel & Generate PDF",
    command=generate_barcodes_pdf,
    width=30,
    height=2,
    font=("Helvetica", 16, "bold"),
    bg="#3498db",
    fg="white",
    activebackground="#2980b9",
    activeforeground="white",
    relief="flat",
    bd=0
)
btn.pack(pady=20)

# Exit button (bottom of screen)
exit_btn = tk.Button(
    root,
    text="Exit",
    command=root.destroy,
    width=15,
    height=1,
    font=("Helvetica", 12),
    bg="#e74c3c",
    fg="white",
    activebackground="#c0392b",
    activeforeground="white",
    relief="flat",
    bd=0
)
exit_btn.pack(side="bottom", pady=30)

# Watermark
signature = tk.Label(
    root,
    text="Developed by Preetham with ❤",
    font=("Helvetica", 12),
    fg="#888888",
    bg="#2c3e50"
)
signature.place(relx=1.0, rely=1.0, anchor="se", x=-20, y=-10)

root.mainloop()